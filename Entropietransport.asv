%% Variables

% variables for the sample
sizeSample = 48;
orderSample = 1;
eigenenergy = 0;
hopping = 1;
hoppingsSample = hopping*eye(orderSample);

% variables for the leads
sizeLead = 104;
[leadVals, derivVals] = calcVals(maxVal = 1, decay = 0.2, offset);
hoppingLead = hopping;
hoppingsInter = [hopping; hopping];

%variables for the calculation of the current
TempMax = 2; %2;
TempStep = 0.05; %0.05;
TempNum = TempMax/TempStep+1;
Temps = linspace(0, TempMax, TempNum);
TempsList = makeList(TempMax, TempStep);

chemPotMax = 1; %1;
chemPotStep = 1;
chemPotNum = 2*chemPotMax/chemPotStep+1;
chemPots = linspace(-chemPotMax, chemPotMax, chemPotNum);
chemPotsList = makeList(chemPotMax, chemPotStep, full=true);

%variables for the calculation of the transmission
omegaVal = 2;
omegaMax = omegaVal*hopping;
omegaStep = 0.005;
omegaNum = 2*omegaMax/omegaStep+1;
omegas = linspace(-omegaMax, omegaMax, omegaNum);
omegasList = makeList(omegaMax, chemPotStep, full=true);

%% Calculation

% compute the Hamiltonian of the Sample
sample = makeSample(eigenenergy, hoppingsSample, sizeSample,  orderSample);

% preparing the Extended Molecule Hamiltonian
[totalSystem, gammaL, gammaR] = makeSystemEM(sample, sizeSample, orderSample, sizeLead, hoppingLead, hoppingsInter, leadVals);

%compute the Eigenvectors and the Eigenvalues of the system
disp('Starting calculation of the Eigenvectors.')
[Eigenvals, leftEVs, rightEVs, ControlEV, MatchLeft, MatchRight, DiffLeft, DiffRight] = eigenvectors(totalSystemEM);
disp('Finished calculation of the Eigenvectors.')

Particle(1:length(chemPots)) = {zeros(1,length(Temps))};
for j = 1:length(chemPots)
    currentsParticle = zeros(1,length(Temps));
    for k = 1:length(Temps)
        [particleResult] = currentQuick(totalSystemEM, gammaL_EM, gammaR_EM, Eigenvals, leftEVs, rightEVs, Temps(k), chemPots(j), sizeLead);
        currentsParticle(k) = particleResult;
        disp(['chemPot: ', num2str(chemPots(j)), ', Temp: ', num2str(Temps(k))])
    end
    Particle{j} = currentsParticle;
end

plotGraph (1, 'Particle', Temps, Particle, chemPots)

%%
function [] = plotGraph (value, Title, Temps, Vals, chemPots)
    figure(value);
    title(Title);
    for i = 1:length(chemPots)
        plot(Temps, Vals{i})
        hold on
    end
    labels = strcat('chemPot = ',cellstr(num2str(chemPots.')));
    legend(labels)
end

%% helping functions
function [values] = makeList(maxVal, stepVal, options)
    arguments
        maxVal 
        stepVal 
        options.full = false
    end
    if options.full == false
        minVal = 0;
    else
        minVal = -1*maxVal;
    end
    numVal = (maxVal-minVal)/stepVal+1;
    values = linspace(minVal, maxVal, numVal);
end

function [leadVals, derivVals] = calcVals(maxVal, decay, offset)
    arguments
        maxVal = 1
        decay = 0.3
        % offset should be at most half the length of the leads
        offset = 32
        % normal: 32
    end
    leadVals = {maxVal, decay, offset};
    derivVals = {0, decay, offset};
end